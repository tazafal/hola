#summary Design Document for the GData Python Client Library.
#labels Phase-Design

= Introduction =

The document outlines the goals and general code structure for the GData client library.

= Table of Contents =
   * Project Objectives
       ** Supported Properties
   * Overview
       ** Sample Usage
   * Detailed Design
       ** Classes

= Project Objectives =

Provide an open source library to assist Python developers in using Google GData APIs. A secondary objective is to provide code for Atom and the Atom Publishing Protocol. This client library will form the foundation for the GData Python sample code.

== Supported Properties ==

The following GData web services are supported in this client library:
   * Google Base Data API
   * Google Calendar Data API

= Overview =

The client library contains two broad categories of classes: data models and service clients.

The service classes will provide methods to perform CRUD operations and queries on Google web services. They will also contain a class for carrying operations in the Atom Publishing Protocol.

The data model classes simplify the construction and manipulation of XML for the resources accessed through the web services. Data classes are provided for elements in Atom and GData, as well as elements specific to services like Google Base and Google Calendar. Programmers may also modify the XML by accessing the ElementTree which the data classes wrap.

== Sample Usage ==

A sample's worth a thousand words, so here's an example of client code which adds an item to Google Base.

{{{
import gbase_service
import gbase
import gdata_service

base_client = gbase_service.GBaseService()
# ...
# Assign credentials, then login:
try:
  base_client.ProgrammaticLogin()
except gdata_service.CaptchaRequired:
# ...

# handle captch challenge if needed, then proceed to create a new base item programatically:
# (you could also build the item by parsing a string or reading a file)
new_item = gbase.GBaseItem()
new_item.author.SetText('Jeff Scudder')
new_item.item_type.SetText('products')
new_item.Add(gbase.Label(text='Computer'))
# ...

# Now add the item to Google Base
success, created_item = base_client.InsertItem(new_item)
if success:
  # delete the item we just created
  success, result = base_client.DeleteItem(created_item.id.GetText())

# Search for some items in the snippets feed.
base_query = gbase_service.Query()
base_query.feed = gbase.SnippetsFeed
base_query['max_results'] = 50
base_query['start_index'] = 100
base_query['bq'] = '[item type: digital camera]'
feed = base_client.Query(base_query)
# Print the name of the first author in the first entry in the feed.
print feed.entry[0].author[0].name.GetText()
}}}

= Detailed Design =

The client library is divided into the following modules:

    * gdata_util: contains ElementWrapper, allows manipulation of XML data
    * atom: contains Feed, Entry, ... facilitates creation of Atom compliant XML objects
    * app_service: contains AtomService which provides HTTP CRUD operations on Atom feeds
    * gdata: contains classes for GData specific extensions to the Atom data model
    * gdata_service: contains GDataService which is the foundation for the other service classes. Extends AtomService and adds Google authentication.
    * gbase: contains BaseItem, Label, etc.
    * gbase_service: contains GBaseService which supports base query syntax (?bq="...")
    * calendar: contains CalendarEvent, etc.
    * calendar_service: contains CalendarService
    * blogger (not in initial release)
    * blogger_service (not in initial release)
    * spreadsheet (not in initial release)
    * spreadsheet_service (not in initial release)

== Classes ==

=== ElementWrapper ===

A convenience class which wraps the ElementTree and simplifies access to children in the tree. By overloading {{{__getitem__}}} and {{{__getattr__}}} I allow access to the attributes of an XML node using the following syntax:

{{{element['attribute']}}}

You can access children elements in the default namespaces using {{{__getattr__}}} like this:

{{{element.namedChild}}}

The above actually performs a search within element for any children with a tag of namedChild in a list of namespaces ({{{gdata_xml.GDATA_NAMESPACES}}}). Here's a usage example. Instead of this ElementTree syntax:

{{{feed.findall('{http://http://www.w3.org/2005/Atom}entry')[5].findall('{http://http://base.google.com/ns/1.0}label')[2].text}}}

You can do the following:

{{{feed.entry[5].label[2].GetText()}}}

This {{{__getattr__}}} based access is provided for convenience and is not required for use. Programmers can also use {{{element.Get('tag', 'namespace')}}} instead or just work with the {{{ElementTree._Element}}} which the wrapper contains by calling {{{element.GetElementTree()}}}. Here is a full list of ElementWrapper methods: